name: Build, Bundle, and Release Action

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions: 
  contents: write  # Grants permission to push commits and create releases

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm ci

      - name: Bundle the action using ncc
        run: npx @vercel/ncc build main.js --out dist

      - name: Commit Bundled Files
        uses: EndBug/add-and-commit@v9
        with:
          message: "chore: update bundled action"
          add: "dist"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Bundled Action Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bundled-action
          path: dist

  release:
    needs: build  # Runs after the build job completes
    if: github.ref == 'refs/heads/main'  # Only run this on main branch pushes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Auto-Increment Version Tag
        id: tag_version
        run: |
          # Fetch tags from remote
          git fetch --tags

          # Get the latest tag (if none, start at v1.0.0)
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            NEW_TAG="v1.0.0"
          else
            # Extract major, minor, and patch numbers
            MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | tr -d 'v')
            MINOR=$(echo $LATEST_TAG | cut -d. -f2)
            PATCH=$(echo $LATEST_TAG | cut -d. -f3)
            
            # Increment the patch version (e.g., v1.0.0 â†’ v1.0.1)
            PATCH=$((PATCH + 1))
            NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          fi

          echo "New tag: $NEW_TAG"

          # Configure Git
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          # Create and push the new tag (ensuring it does not already exist)
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Tag $NEW_TAG already exists. Exiting."
            exit 1
          fi

          git tag -a $NEW_TAG -m "Automated release $NEW_TAG"
          git push origin $NEW_TAG

          # Expose the new tag as an environment variable
          echo "TAG_NAME=$NEW_TAG" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Release ${{ env.TAG_NAME }}"
          body: "This is an automated release including the latest bundled action."
          draft: false
          prerelease: false
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
