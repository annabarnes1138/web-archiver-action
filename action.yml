name: "Archive Artifacts Composite Action"
description: "Archives a list of web artifacts (with optional descriptions), generates files, commits changes, and deploys to GitHub Pages."
inputs:
  artifacts:
    description: >
      A JSON array of artifact objects. Each object must include a "url" property and can optionally include a "description".
      Example:
      [
        { "url": "https://example.com", "description": "Example website" },
        { "url": "r/AskReddit", "description": "Subreddit Wiki for AskReddit" },
        { "url": "https://example.com/file.pdf" }
      ]
    required: true
  schedule:
    description: 'A description of the schedule (e.g., "Daily at midnight (UTC)")'
    required: false
    default: 'Daily at midnight (UTC)'
  static_description:
    description: 'A static description to include at the top of the generated README file'
    required: false
    default: ''
  github_token:
    description: "GitHub token for committing changes and deploying to GitHub Pages."
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout Action Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }} # Ensures the action repo is checked out
        path: action_repo # Checkout into a subdirectory

    - name: Debug List Files in Repository
      shell: bash
      run: |
        echo ${{ github.repository }}
        echo "Current directory:"
        pwd
        echo "Listing root contents:"
        ls -la
        echo "Listing action_repo directory:"
        ls -la action_repo/ || echo "action_repo/ directory not found!"
        echo "Listing scripts directory:"
        ls -la action_repo/scripts/ || echo "action_repo/scripts/ directory not found!"

    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget curl python3 jq

    - name: Write Artifacts JSON to File
      shell: bash
      run: |
        # Convert input JSON string to valid JSON file format
        echo '${{ inputs.artifacts }}' | jq --compact-output '.' > artifacts.json || exit 1
    
        echo "Artifacts JSON:"
        cat artifacts.json

    - name: Archive Artifacts and Generate Files
      id: archive_step
      shell: bash
      run: |
        # Create directories for archived content and static files.
        mkdir -p archive static

        # Initialize the README and index content.
        README_CONTENT="# Archive Report\n\n## Archived Artifacts:\n"
        INDEX_CONTENT="<html><head><title>Archive Index</title></head><body><h1>Archived Artifacts</h1><ul>"

        # Prepend the static description to the README if provided.
        if [ -n "${{ inputs.static_description }}" ]; then
          README_CONTENT="${{ inputs.static_description }}\n\n${README_CONTENT}"
        fi

        # Get the number of artifacts in the JSON file.
        count=$(jq length artifacts.json)
        echo "Processing $count artifacts."

        # Loop over each artifact in the JSON file.
        for (( i=0; i<count; i++ )); do
          artifact_url=$(jq -r ".[$i].url" artifacts.json)
          artifact_description=$(jq -r ".[$i].description // empty" artifacts.json)
          
          echo "Processing artifact: $artifact_url"
          
          # Call the dispatcher script (which calls the appropriate handler).
          output=$(./action_repo/scripts/handle_artifact.sh "$artifact_url" "$GITHUB_REPOSITORY")
          # Split the output into README and index snippets (using "|||").
          IFS="|||" read -r readme_snippet index_snippet <<< "$output"
          
          # Append the artifact description if provided.
          if [ -n "$artifact_description" ]; then
            # Remove any trailing newline before appending.
            readme_snippet="${readme_snippet%\\n} - ${artifact_description}\n"
          fi

          # Append the current date as the last archived date.
          current_date=$(date +"%Y-%m-%d %H:%M:%S")
          readme_snippet="${readme_snippet%\\n} - Last archived on: ${current_date}\n"
          
          README_CONTENT+="$readme_snippet"
          INDEX_CONTENT+="$index_snippet"
        done

        INDEX_CONTENT+="</ul></body></html>"

        # Write the generated README and index files.
        echo -e "$README_CONTENT" > README.md
        echo -e "$INDEX_CONTENT" > index.html

        # Append schedule info, a ZIP download link, and GitHub Pages link to the README.
        echo -e "\n## Schedule\n${{ inputs.schedule }}" >> README.md
        ZIP_URL="https://github.com/${GITHUB_REPOSITORY}/archive/refs/heads/${GITHUB_REF#refs/heads/}.zip"
        echo -e "\n[Download ZIP of Repository]($ZIP_URL)" >> README.md
        REPO_NAME=$(basename "$GITHUB_REPOSITORY")
        OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
        PAGES_URL="https://${OWNER}.github.io/${REPO_NAME}/"
        echo -e "\n[View Published GitHub Pages Site]($PAGES_URL)" >> README.md

        # Add a sample static file.
        echo "This is a static file." > static/example.txt

    - name: Commit and Push Changes
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Update archived artifacts [skip ci]" || echo "No changes to commit"
        git push

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ inputs.github_token }}
        publish_dir: .